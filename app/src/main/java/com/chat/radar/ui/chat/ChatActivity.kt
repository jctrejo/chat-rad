package com.chat.radar.ui.chatimport android.app.Dialogimport android.content.Intentimport android.graphics.Pointimport android.graphics.drawable.ColorDrawableimport android.media.MediaPlayerimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.view.Viewimport android.view.Windowimport android.widget.PopupMenuimport androidx.annotation.NonNullimport androidx.annotation.RequiresApiimport androidx.appcompat.app.AppCompatActivityimport androidx.recyclerview.widget.LinearLayoutManagerimport com.android.chat_redar.Rimport com.android.chat_redar.databinding.FragmentChatBindingimport com.chat.radar.data.model.ChatModelimport com.bumptech.glide.Glideimport com.chat.radar.common.Constants.DIAGONAL_ASTERISKimport com.chat.radar.common.Constants.DIAGONAL_SERVICE_AUDimport com.chat.radar.common.Constants.EMPTYimport com.chat.radar.common.Constants.EXTRA_RECIEVER_IDimport com.chat.radar.common.Constants.EXTRA_RECIEVER_NAMEimport com.chat.radar.common.Constants.EXTRA_RECIEVER_PICTUREimport com.chat.radar.common.Constants.EXTRA_SENDER_NAMEimport com.chat.radar.common.Constants.EXTRA_SENDER_PICTUREimport com.chat.radar.common.Constants.EXTRA_SEND_IDimport com.chat.radar.common.Constants.EXTRA_TOKENimport com.chat.radar.common.Constants.FIREBASE_KEY_STATUSimport com.chat.radar.common.Constants.FIREBASE_KEY_STATUSESimport com.chat.radar.common.Constants.JPGimport com.chat.radar.common.Constants.ONLINEimport com.chat.radar.common.Constants.PREFERENCES_KEY_WALLPAPPERimport com.chat.radar.common.Constants.SPOTimport com.chat.radar.ui.chat.adapter.ChatAdapterimport com.chat.radar.util.AudioRecorderimport com.chat.radar.util.DataProccessorimport com.chat.radar.util.DialogCustomProgressimport com.chat.radar.util.RecyclerItemClickListenerimport com.chat.radar.util.StaticFunctionsimport com.chat.radar.util.StaticFunctions.Companion.ApiCallForNotificationimport com.chat.radar.util.StaticFunctions.Companion.FormateMilliSeccondimport com.chat.radar.util.StaticFunctions.Companion.GetCurrentDateimport com.chat.radar.util.StaticFunctions.Companion.GetCurrentTimeimport com.chat.radar.util.StaticFunctions.Companion.GetWallpapperListimport com.chat.radar.util.StaticFunctions.Companion.ShowToastimport com.chat.radar.util.glideimport com.chat.radar.util.hideimport com.chat.radar.util.showimport com.devlomi.record_view.OnRecordListenerimport com.devlomi.record_view.RecordButtonimport com.devlomi.record_view.RecordViewimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.database.DataSnapshotimport com.google.firebase.database.DatabaseErrorimport com.google.firebase.database.DatabaseReferenceimport com.google.firebase.database.FirebaseDatabaseimport com.google.firebase.database.ValueEventListenerimport com.google.firebase.storage.FirebaseStorageimport java.io.Fileimport java.util.UUIDclass ChatActivity : AppCompatActivity() {    private lateinit var binding: FragmentChatBinding    private var senderId: String = ""    private var reciverId: String = ""    private var recieverName: String = ""    private var recieverProfilePic: String = ""    private var fcmToken: String = ""    private var senderName: String = ""    private var senderProfilePic: String = ""    private var chat: ArrayList<ChatModel>? = ArrayList()    private var chatAdapter: ChatAdapter? = null    private var imageRequestCode = 7    private var fileRequestCode = 8    private var customProgressDialog: DialogCustomProgress? = null    private var seenListener: ValueEventListener? = null    private var chatRefrence: DatabaseReference? = null    private var audioRecorder: AudioRecorder? = null    private var mediaPlayer: MediaPlayer = MediaPlayer()    private var dataProcessor: DataProccessor? = null    @RequiresApi(Build.VERSION_CODES.Q)    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding = FragmentChatBinding.inflate(layoutInflater)        setContentView(binding.root)        initView()    }    private fun initView() {        supportActionBar?.hide()        dataProcessor = DataProccessor(this)        senderId = intent.getStringExtra(EXTRA_SEND_ID) ?: EMPTY        reciverId = intent.getStringExtra(EXTRA_RECIEVER_ID) ?: EMPTY        recieverName = intent.getStringExtra(EXTRA_RECIEVER_NAME) ?: EMPTY        fcmToken = intent.getStringExtra(EXTRA_TOKEN) ?: EMPTY        senderName = intent.getStringExtra(EXTRA_SENDER_NAME) ?: EMPTY        recieverProfilePic = intent.getStringExtra(EXTRA_RECIEVER_PICTURE) ?: EMPTY        senderProfilePic = intent.getStringExtra(EXTRA_SENDER_PICTURE) ?: EMPTY        customProgressDialog = DialogCustomProgress(this)        val linearLayoutManager = LinearLayoutManager(this)        linearLayoutManager.stackFromEnd = true        binding.chatRecyclerview.layoutManager = linearLayoutManager        binding.chatRecyclerview.setHasFixedSize(true)        binding.tvUsername.text = recieverName        binding.profilePic.glide(this, recieverProfilePic)        setWallpapper()        binding.imgBack.setOnClickListener { onBackPressed() }        binding.chatRecyclerview.addOnItemTouchListener(            RecyclerItemClickListener(                applicationContext,                binding.chatRecyclerview, object : RecyclerItemClickListener.OnItemClickListener {                    override fun onItemClick(view: View?, position: Int) {                        if (position >= 0) {                            val chatModel: ChatModel = chat?.get(position) ?: return                            if (chatModel.voiceMessage.isNotEmpty()) {                                chatAdapter?.selectedPosition = position                                chatAdapter?.notifyDataSetChanged()                                if (mediaPlayer != null) {                                    if (mediaPlayer.isPlaying) {                                        mediaPlayer.stop()                                        mediaPlayer.reset()                                    }                                }                                if (mediaPlayer.isPlaying) {                                    mediaPlayer.stop()                                    mediaPlayer.reset()                                } else {                                    mediaPlayer = MediaPlayer()                                    mediaPlayer.setDataSource(chatModel.voiceMessage)                                    mediaPlayer.prepare()                                    mediaPlayer.start()                                }                                mediaPlayer.setOnCompletionListener { mediaPlayer ->                                    mediaPlayer.stop()                                    chatAdapter?.selectedPosition = -1                                    chatAdapter?.notifyDataSetChanged()                                }                            }                        }                    }                    override fun onItemLongClick(view: View?, position: Int) {                        val location = IntArray(2)                        view?.getLocationOnScreen(location)                        val p = Point()                        p.x = location[0]                        p.y = location[1]                        if (FirebaseAuth.getInstance().currentUser?.uid == chat?.get(position)?.recieverId) {                        } else {                        }                    }                })        )        binding.imgSend.setOnClickListener {            val message: String = binding.etMessage.text.toString().trim()            if (message.isNotEmpty()) {                sendMessage(                    senderId, reciverId, message, "", GetCurrentTime(), "",                    "", 1, ""                )            }        }        binding.imgAttachment.setOnClickListener {            val popupMenu = PopupMenu(this@ChatActivity, binding.imgAttachment)            popupMenu.menuInflater.inflate(R.menu.menu, popupMenu.menu)            popupMenu.setOnMenuItemClickListener { menuItem ->                if (menuItem.itemId == R.id.imageMenu) {                    val intent = Intent()                    intent.type = "image/*"                    intent.action = Intent.ACTION_GET_CONTENT                    startActivityForResult(intent, imageRequestCode)                } else if (menuItem.itemId == R.id.fileMenu) {                    val intent = Intent().setType(DIAGONAL_ASTERISK).setAction(Intent.ACTION_GET_CONTENT)                    startActivityForResult(                        Intent.createChooser(intent, getString(R.string.select_a_file)),                        fileRequestCode                    )                } else if (menuItem.itemId == R.id.voiceMenu) {                    showVoiceDialog()                }                true            }            popupMenu.show()        }        readMessages(senderId, reciverId)        seenMessage()    }    private fun setWallpapper() {        val wallpapperPosition: Int = dataProcessor?.getInt(PREFERENCES_KEY_WALLPAPPER) ?: 0        if (wallpapperPosition != -1) {            binding.bgImage.show()            Glide.with(this).load(GetWallpapperList()[wallpapperPosition]).into(binding.bgImage)        } else {            binding.bgImage.hide()        }    }    override fun onResume() {        super.onResume()        setWallpapper()    }    private fun showVoiceDialog() {        val dialog = Dialog(this)        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)        dialog.setContentView(R.layout.attach_voice_dialog)        dialog.window?.setBackgroundDrawable(ColorDrawable(android.graphics.Color.TRANSPARENT))        val recordView = dialog.findViewById<RecordView>(R.id.record_view)        val recordButton = dialog.findViewById<RecordButton>(R.id.record_button)        recordButton.setRecordView(recordView)        recordView.setOnRecordListener(object : OnRecordListener {            override fun onStart() {                audioRecorder = AudioRecorder(DIAGONAL_SERVICE_AUD + System.currentTimeMillis())                audioRecorder?.start()            }            override fun onCancel() {}            override fun onFinish(recordTime: Long, limitReached: Boolean) {                audioRecorder?.stop()                val duration = FormateMilliSeccond(recordTime)                uploadVoiceMessageToFirebase(Uri.fromFile(File(audioRecorder?.path)), duration)                dialog.dismiss()            }            override fun onLessThanSecond() {}        })        recordView.setOnBasketAnimationEndListener {}        dialog.show()    }    private fun checkUserStatus() {        val userRef: DatabaseReference =            FirebaseDatabase.getInstance().reference.child(FIREBASE_KEY_STATUSES)        userRef.child(reciverId).addValueEventListener(object : ValueEventListener {            override fun onDataChange(@NonNull dataSnapshot: DataSnapshot) {                val status: String = dataSnapshot.child(FIREBASE_KEY_STATUS).value.toString()                if (status.isNotEmpty()) {                    if (status == ONLINE) {                        binding.tvOnline.text = getString(R.string.online)                    }                }            }            override fun onCancelled(@NonNull databaseError: DatabaseError) {}        })    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (requestCode == imageRequestCode            && resultCode == RESULT_OK            && data != null            && data.data != null        ) {            val fileUri = data.data            fileUri?.let { uploadImageToFirebase(it) }        } else if (requestCode == fileRequestCode            && resultCode == RESULT_OK            && data != null            && data.data != null        ) {            val fileUri = data.data            fileUri?.let { uploadFileToFirebase(it) }        }    }    private fun uploadFileToFirebase(fileUri: Uri) {        customProgressDialog?.show()        val fileName = UUID.randomUUID().toString() + SPOT + StaticFunctions.GetMimeType(            fileUri,            applicationContext        )        val refStorage = FirebaseStorage.getInstance().reference.child("chatFiles/$fileName")        refStorage.putFile(fileUri)            .addOnSuccessListener { taskSnapshot ->                taskSnapshot.storage.downloadUrl.addOnSuccessListener {                    customProgressDialog?.dismiss()                    sendMessage(                        senderId, reciverId, getString(R.string.shared_a_file), "", GetCurrentTime(), "",                        it.toString(), 3, ""                    )                }            }.addOnFailureListener { e ->                customProgressDialog?.hide()                print(e.message)            }    }    private fun uploadVoiceMessageToFirebase(fileUri: Uri, duration: String) {        customProgressDialog?.show()        val fileName = UUID.randomUUID().toString() + SPOT + StaticFunctions.GetMimeType(            fileUri, applicationContext        )        val refStorage = FirebaseStorage.getInstance().reference.child("chatVoices/$fileName")        refStorage.putFile(fileUri)            .addOnSuccessListener { taskSnapshot ->                taskSnapshot.storage.downloadUrl.addOnSuccessListener {                    customProgressDialog?.dismiss()                    sendMessage(                        senderId, reciverId, getString(R.string.shared_a_file), duration, GetCurrentTime(), "",                        "", 4, it.toString()                    )                }            }.addOnFailureListener { e ->                customProgressDialog?.hide()                print(e.message)            }    }    private fun uploadImageToFirebase(fileUri: Uri) {        customProgressDialog?.show()        val fileName = UUID.randomUUID().toString() + JPG        val refStorage = FirebaseStorage.getInstance().reference.child("chatPictures/$fileName")        refStorage.putFile(fileUri)            .addOnSuccessListener { taskSnapshot ->                taskSnapshot.storage.downloadUrl.addOnSuccessListener {                    customProgressDialog?.dismiss()                    sendMessage(                        senderId, reciverId, getString(R.string.shared_a_file), "",                        GetCurrentTime(), it.toString(), "", 2, ""                    )                }            }.addOnFailureListener { e ->                customProgressDialog?.hide()                print(e.message)            }    }    private fun sendMessage(        senderId: String,        recieverId: String,        message: String,        duration: String,        time: String,        imageUrl: String,        fileUrl: String,        messageType: Int,        voiceMessage: String,    ) {        customProgressDialog?.show()        ApiCallForNotification(            message,            messageType,            imageUrl,            fileUrl,            senderId,            recieverId,            fcmToken,            senderProfilePic,            recieverProfilePic,            senderName,            recieverName,            applicationContext        )        binding.etMessage.setText("")        val sendMessageRef: DatabaseReference =            FirebaseDatabase.getInstance().reference.child("Chats")        val pushId = sendMessageRef.push().key        val chatModel = ChatModel(            message, time, pushId!!, senderId, recieverId,            imageUrl, fileUrl, "Delivered", "No", voiceMessage,            messageType.toString(), GetCurrentDate(), duration        )        sendMessageRef.child(pushId).setValue(chatModel).addOnCompleteListener {            customProgressDialog?.dismiss()            if (!it.isSuccessful) {                ShowToast(applicationContext, it.exception?.localizedMessage!!)            }        }    }    private fun readMessages(senderId: String, recieverId: String) {        customProgressDialog?.show()        val readMessageRef: DatabaseReference =            FirebaseDatabase.getInstance().reference.child("Chats")        readMessageRef.addValueEventListener(object : ValueEventListener {            override fun onDataChange(@NonNull dataSnapshot: DataSnapshot) {                customProgressDialog?.dismiss()                chat?.clear()                for (snapshot in dataSnapshot.children) {                    val chat: ChatModel? = snapshot.getValue(ChatModel::class.java)                    if (chat?.recieverId == senderId && chat.senderId == recieverId ||                        chat?.recieverId == recieverId && chat.senderId == senderId                    ) {                        this@ChatActivity.chat?.add(chat)                    }                }                checkUserStatus()                chatAdapter =                    chat?.let {                        ChatAdapter(                            this@ChatActivity,                            it, recieverName, recieverProfilePic                        )                    }                binding.chatRecyclerview.adapter = chatAdapter            }            override fun onCancelled(@NonNull databaseError: DatabaseError) {}        })    }    private fun seenMessage() {        chatRefrence = FirebaseDatabase.getInstance().reference.child("Chats")        val fuser = FirebaseAuth.getInstance().currentUser        seenListener = chatRefrence?.addValueEventListener(object : ValueEventListener {            override fun onDataChange(@NonNull dataSnapshot: DataSnapshot) {                for (snapshot in dataSnapshot.children) {                    val chatModel = snapshot.getValue(ChatModel::class.java)                    if (chatModel?.recieverId.equals(fuser?.uid) && chatModel?.senderId.equals(                            reciverId                        )                    ) {                        val hashMap: HashMap<String, Any> = HashMap()                        hashMap["messageStatus"] = "Seen"                        snapshot.ref.updateChildren(hashMap)                    }                }            }            override fun onCancelled(@NonNull databaseError: DatabaseError) {}        })    }    override fun onPause() {        super.onPause()        seenListener?.let { chatRefrence?.removeEventListener(it) }    }}